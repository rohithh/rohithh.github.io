<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://0.0.0.0:8080/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:8080/" rel="alternate" type="text/html" /><updated>2017-12-25T05:39:13+00:00</updated><id>http://0.0.0.0:8080/</id><title type="html">Rohith H Y</title><subtitle>small description about you will take you long</subtitle><entry><title type="html">Welcome to my Site!</title><link href="http://0.0.0.0:8080/2017/05/16/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to my Site!" /><published>2017-05-16T19:44:20+00:00</published><updated>2017-05-16T19:44:20+00:00</updated><id>http://0.0.0.0:8080/2017/05/16/welcome-to-jekyll</id><content type="html" xml:base="http://0.0.0.0:8080/2017/05/16/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Rohith</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry><entry><title type="html">How to use the Bluetooth Low Energy API in Android</title><link href="http://0.0.0.0:8080/2016/07/08/Blog-Bluetooth-LE-API.html" rel="alternate" type="text/html" title="How to use the Bluetooth Low Energy API in Android" /><published>2016-07-08T12:00:00+00:00</published><updated>2016-07-08T12:00:00+00:00</updated><id>http://0.0.0.0:8080/2016/07/08/Blog-Bluetooth-LE-API</id><content type="html" xml:base="http://0.0.0.0:8080/2016/07/08/Blog-Bluetooth-LE-API.html">&lt;div class=&quot;entry-content&quot;&gt;
	&lt;p&gt;I’ve been creating an application to monitor the atmospheric pollution using a Bluetooth LE device. Initially, it was a bit hard as I was overwhelmed with the number of options available but I was eventually able to figure out what needed to be done to establish a connection between the phone and device and extract the bluetooth data.&lt;/p&gt;
    &lt;p&gt;The below video helped a lot, it is very straightforward compared to a lot of the others and helped me in building my application :&amp;nbsp;&lt;span class=&quot;skimlinks-unlinked&quot;&gt;https://www.youtube.com/watch?v=x1y4tEHDwk0&amp;amp;list=PL2PAEHK-s-1UlXHzBhIP68yCsP8EOHgxJ&lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;1. Make your activity implement BluetoothAdapter.LeScanCallback&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;public class Main extends Activity implements BluetoothAdapter.LeScanCallback {&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;2. Get a&amp;nbsp;reference to the bluetooth manager&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;BluetoothManager manager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);
    mBluetoothAdapter = manager.getAdapter();&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;3. Have a “Start Scanning” &amp;nbsp;button in your UI which when clicked would begin scanning for Bluetooth LE devices and “Stop Scanning” to stop scanning. When clicked, the corresponding methods below would be executed :&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;private void startScan(View view) {
    Toast.makeText(this, &quot;Starting scan&quot;, Toast.LENGTH_SHORT).show();
    mBluetoothAdapter.startLeScan(this);
    }&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;public void stopScan(View view) {
        Toast.makeText(this, &quot;Stopping scan&quot;, Toast.LENGTH_SHORT).show();
        mBluetoothAdapter.stopLeScan(this);
    }&lt;/code&gt;&lt;/pre&gt;
    &lt;p style=&quot;text-align:center;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
        &lt;img style=&quot;display:block;margin:auto;&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/07/screen-shot-2016-07-08-at-1-16-54-pm.png&quot; /&gt;&lt;/p&gt;
    &lt;p style=&quot;text-align:left;&quot;&gt;&lt;strong&gt;Explanation&lt;/strong&gt; : startLeScan and stopLeScan are methods of the BluetoothAdapter class which start or stop the scanning process when called.&lt;/p&gt;
    &lt;p style=&quot;text-align:left;&quot;&gt;3. Now, whenever a device is located a call back function is executed from where you can extract its name, address and data that it is sending.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;@Override
    public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {
        &lt;span class=&quot;skimlinks-unlinked&quot;&gt;System.out.println(&quot;New&lt;/span&gt;ce : &quot; + device.getName() + &quot; : &quot; + device.getAddress());
        Toast.makeText(this,&quot;New Device : &quot; + device.getName() + &quot; : &quot; + device.getAddress(), Toast.LENGTH_SHORT).show();
    }&lt;/code&gt;&lt;/pre&gt;
    &lt;p style=&quot;text-align:left;&quot;&gt;&lt;/p&gt;
    &lt;p style=&quot;text-align:left;&quot;&gt;4. Now that the connection is established, you may proceed to operate on your data in the ways you wish.&lt;/p&gt;
    &lt;p style=&quot;text-align:left;&quot;&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The startLeScan &amp;nbsp;and stopLeScan of the BluetoothAdapter class have been deprecated and replaced by other methods, please feel free to use them. I used them for this tutorial because they are unbelievably easy to use and I was able to add the desired functionality to my app successfully.&lt;/p&gt;
    &lt;p style=&quot;text-align:left;&quot;&gt;
	&lt;/p&gt;
&lt;/div&gt;</content><author><name>Rohith H Y</name></author><summary type="html">I’ve been creating an application to monitor the atmospheric pollution using a Bluetooth LE device. Initially, it was a bit hard as I was overwhelmed with the number of options available but I was eventually able to figure out what needed to be done to establish a connection between the phone and device and extract the bluetooth data. The below video helped a lot, it is very straightforward compared to a lot of the others and helped me in building my application :&amp;nbsp;https://www.youtube.com/watch?v=x1y4tEHDwk0&amp;amp;list=PL2PAEHK-s-1UlXHzBhIP68yCsP8EOHgxJ 1. Make your activity implement BluetoothAdapter.LeScanCallback public class Main extends Activity implements BluetoothAdapter.LeScanCallback { 2. Get a&amp;nbsp;reference to the bluetooth manager BluetoothManager manager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE); mBluetoothAdapter = manager.getAdapter(); 3. Have a “Start Scanning” &amp;nbsp;button in your UI which when clicked would begin scanning for Bluetooth LE devices and “Stop Scanning” to stop scanning. When clicked, the corresponding methods below would be executed : private void startScan(View view) { Toast.makeText(this, &quot;Starting scan&quot;, Toast.LENGTH_SHORT).show(); mBluetoothAdapter.startLeScan(this); } public void stopScan(View view) { Toast.makeText(this, &quot;Stopping scan&quot;, Toast.LENGTH_SHORT).show(); mBluetoothAdapter.stopLeScan(this); } &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Explanation : startLeScan and stopLeScan are methods of the BluetoothAdapter class which start or stop the scanning process when called. 3. Now, whenever a device is located a call back function is executed from where you can extract its name, address and data that it is sending. @Override public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) { System.out.println(&quot;Newce : &quot; + device.getName() + &quot; : &quot; + device.getAddress()); Toast.makeText(this,&quot;New Device : &quot; + device.getName() + &quot; : &quot; + device.getAddress(), Toast.LENGTH_SHORT).show(); } 4. Now that the connection is established, you may proceed to operate on your data in the ways you wish. NOTE: The startLeScan &amp;nbsp;and stopLeScan of the BluetoothAdapter class have been deprecated and replaced by other methods, please feel free to use them. I used them for this tutorial because they are unbelievably easy to use and I was able to add the desired functionality to my app successfully.</summary></entry><entry><title type="html">The simple steps to deploy apps on Google App Engine</title><link href="http://0.0.0.0:8080/2016/06/21/Blog-Google-App-Engine-Deploy.html" rel="alternate" type="text/html" title="The simple steps to deploy apps on Google App Engine" /><published>2016-06-21T12:00:00+00:00</published><updated>2016-06-21T12:00:00+00:00</updated><id>http://0.0.0.0:8080/2016/06/21/Blog-Google-App-Engine-Deploy</id><content type="html" xml:base="http://0.0.0.0:8080/2016/06/21/Blog-Google-App-Engine-Deploy.html">&lt;div class=&quot;entry-content&quot;&gt;
	&lt;p&gt;So, the latest adventure that I’ve embarked upon is the Google App Engine. Trying to create and deploy some&amp;nbsp;web applications. Ran into some trouble trying to deploy the app that I created onto the Engine.&lt;/p&gt;
    &lt;p&gt;I had to go through a lot of tutorials, tried at least 5 different ways to do what I am about to show you. Of all the possible ways that I tried, I found this to be the simplest and hence I’d like to share it to you and spare you the trouble of googling and youtubing away a few hours. The approach I am using is the simple GUI way of doing it without using the command-line, though I’d like to add&amp;nbsp;that that route is not too hard&amp;nbsp;a route to take either.&lt;/p&gt;
    &lt;p&gt;I have tried to make it as simple and short as possible with very concise steps because I know you probably want it all and you want it fast. So, hope you find it useful.&lt;/p&gt;
    &lt;p&gt;Here’s the step-by-step procedure to follow to be able to easily deploy your app online for a mac ( divided into parts A and B ) :&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Downloads to be done&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
        &lt;ol&gt;
            &lt;li&gt;Download the Google App Engine SDK ( By searching for it on Google of course ). The detailed steps are : Google &amp;gt; Google App Engine SDK &amp;gt; SDK for Python/Java/ Language of your choice.&lt;/li&gt;
            &lt;li&gt;Then unzip the file &amp;gt; Double click the .dmg file &amp;gt; Drag it into your Applications folder&lt;/li&gt;
            &lt;li&gt;Now you have it on your computer, double click it and launch it. The downloaded file is called GoogleAppEngineLauncher with the cool icon shown below.&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/ol&gt;
    &lt;p&gt;&lt;img style=&quot;display:block;margin:auto;&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/06/screen-shot-2016-06-21-at-11-53-03-am.png&quot; /&gt;&lt;/p&gt;
    &lt;p&gt;4. &amp;nbsp;It will launch another cool window that is shown below :&lt;/p&gt;
    &lt;p&gt;&lt;img style=&quot;display:block;margin:auto;&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/06/screen-shot-2016-06-21-at-11-54-40-am.png&quot; /&gt;&lt;/p&gt;
    &lt;p&gt;Congratulations, you have successfully completed the easy part of the tutorial. Now for the hard(er) part.&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;B. Creating and Deploying the application&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;1. Go to &lt;span class=&quot;skimlinks-unlinked&quot;&gt;appengine.google.com&lt;/span&gt; &amp;gt; Click&amp;nbsp;&lt;strong&gt;Google Developers Console &lt;/strong&gt;&amp;gt; Create a project shown below&lt;/p&gt;
    &lt;p&gt;&lt;img style=&quot;display:block;margin:auto;width:90%&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/06/screen-shot-2016-06-21-at-12-04-41-pm.png&quot; /&gt;&lt;/p&gt;
    &lt;p&gt;2. It then asks for a project name, and auto-generates a wicked project-id for you ( which is very&amp;nbsp;&lt;strong&gt;important&lt;/strong&gt; and can be edited according to your choice).&lt;/p&gt;
    &lt;p&gt;Note : I say the project-id is important as you will be deploying your app to the below url : &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;strong&gt;&lt;span class=&quot;skimlinks-unlinked&quot;&gt;project-id.appspot.com&lt;/span&gt;&amp;nbsp;&lt;/strong&gt;so choose one that you can remember.&lt;/p&gt;
    &lt;p&gt;&lt;img style=&quot;display:block;margin:auto;&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/06/screen-shot-2016-06-21-at-12-05-42-pm.png&quot; /&gt;&lt;/p&gt;
    &lt;p&gt;3. The project has now been created online. Now you should write and deploy code from your desktop to the project. ( While it can be done online as well, I will demonstrate how to do it on your machine and then deploy it ).&lt;/p&gt;
    &lt;p&gt;4. Open the GoogleAppEngineLauncher &amp;gt;&amp;nbsp;File &amp;gt; New Application&lt;/p&gt;
    &lt;p&gt;You can choose the desired port to run the application on your computer to test it. I have chosen 9080.&lt;/p&gt;
    &lt;p&gt;&lt;img style=&quot;display:block;margin:auto;&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/06/screen-shot-2016-06-21-at-12-14-21-pm.png&quot; /&gt;&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;Important : Application ID must be same as the one you chose while creating your project online&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;5. Now this creates a folder on your computer in the specified path with the following files.&lt;/p&gt;
    &lt;p&gt;&lt;img style=&quot;display:block;margin:auto;width:90%&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/06/screen-shot-2016-06-21-at-12-17-57-pm.png?&quot; /&gt;&lt;/p&gt;
    &lt;p&gt;&lt;span class=&quot;skimlinks-unlinked&quot;&gt;app.yaml&lt;/span&gt; : Basic configuration files to set your application name, version and other &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; important metadata&lt;/p&gt;
    &lt;p&gt;&lt;span class=&quot;skimlinks-unlinked&quot;&gt;main.py&lt;/span&gt; : This is an&amp;nbsp;important file that contains the program that you wish to deploy on the server. Here you can use this to create the basic layout of your web page and add different functionality to your programs. Mine simply displays “Hello world!”.&lt;/p&gt;
    &lt;p&gt;6. Now you can test it on your local server by hitting “Run” on GoogleAppEngineLauncher.&lt;/p&gt;
    &lt;p&gt;7. Once you’re fine with that, you just hit deploy on GoogleAppEngineLauncher.&lt;/p&gt;
    &lt;p&gt;8. Next go to the url &lt;span class=&quot;skimlinks-unlinked&quot;&gt;your-app-id.appspot.com&lt;/span&gt; and you will see your app/web page up and running. The below is one such app that I was able to successfully run on the Engine (although on a different id than the one that I have used) .&lt;/p&gt;
    &lt;p&gt;&lt;img style=&quot;display:block;margin:auto;&quot; src=&quot;https://thehylifeblog.files.wordpress.com/2016/06/screen-shot-2016-06-21-at-12-30-13-pm.png?&quot; /&gt;&lt;/p&gt;
    &lt;p&gt;&amp;nbsp;&lt;/p&gt;
    &lt;p&gt;Rohith out.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Rohith H Y</name></author><summary type="html">So, the latest adventure that I’ve embarked upon is the Google App Engine. Trying to create and deploy some&amp;nbsp;web applications. Ran into some trouble trying to deploy the app that I created onto the Engine. I had to go through a lot of tutorials, tried at least 5 different ways to do what I am about to show you. Of all the possible ways that I tried, I found this to be the simplest and hence I’d like to share it to you and spare you the trouble of googling and youtubing away a few hours. The approach I am using is the simple GUI way of doing it without using the command-line, though I’d like to add&amp;nbsp;that that route is not too hard&amp;nbsp;a route to take either. I have tried to make it as simple and short as possible with very concise steps because I know you probably want it all and you want it fast. So, hope you find it useful. Here’s the step-by-step procedure to follow to be able to easily deploy your app online for a mac ( divided into parts A and B ) : A.&amp;nbsp;&amp;nbsp;Downloads to be done Download the Google App Engine SDK ( By searching for it on Google of course ). The detailed steps are : Google &amp;gt; Google App Engine SDK &amp;gt; SDK for Python/Java/ Language of your choice. Then unzip the file &amp;gt; Double click the .dmg file &amp;gt; Drag it into your Applications folder Now you have it on your computer, double click it and launch it. The downloaded file is called GoogleAppEngineLauncher with the cool icon shown below. 4. &amp;nbsp;It will launch another cool window that is shown below : Congratulations, you have successfully completed the easy part of the tutorial. Now for the hard(er) part. B. Creating and Deploying the application 1. Go to appengine.google.com &amp;gt; Click&amp;nbsp;Google Developers Console &amp;gt; Create a project shown below 2. It then asks for a project name, and auto-generates a wicked project-id for you ( which is very&amp;nbsp;important and can be edited according to your choice). Note : I say the project-id is important as you will be deploying your app to the below url : &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; project-id.appspot.com&amp;nbsp;so choose one that you can remember. 3. The project has now been created online. Now you should write and deploy code from your desktop to the project. ( While it can be done online as well, I will demonstrate how to do it on your machine and then deploy it ). 4. Open the GoogleAppEngineLauncher &amp;gt;&amp;nbsp;File &amp;gt; New Application You can choose the desired port to run the application on your computer to test it. I have chosen 9080. Important : Application ID must be same as the one you chose while creating your project online 5. Now this creates a folder on your computer in the specified path with the following files. app.yaml : Basic configuration files to set your application name, version and other &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; important metadata main.py : This is an&amp;nbsp;important file that contains the program that you wish to deploy on the server. Here you can use this to create the basic layout of your web page and add different functionality to your programs. Mine simply displays “Hello world!”. 6. Now you can test it on your local server by hitting “Run” on GoogleAppEngineLauncher. 7. Once you’re fine with that, you just hit deploy on GoogleAppEngineLauncher. 8. Next go to the url your-app-id.appspot.com and you will see your app/web page up and running. The below is one such app that I was able to successfully run on the Engine (although on a different id than the one that I have used) . &amp;nbsp; Rohith out.</summary></entry><entry><title type="html">The troubles of serial communication on a Mac</title><link href="http://0.0.0.0:8080/2016/06/10/Serial-Communication-Mac.html" rel="alternate" type="text/html" title="The troubles of serial communication on a Mac" /><published>2016-06-10T12:00:00+00:00</published><updated>2016-06-10T12:00:00+00:00</updated><id>http://0.0.0.0:8080/2016/06/10/Serial-Communication-Mac</id><content type="html" xml:base="http://0.0.0.0:8080/2016/06/10/Serial-Communication-Mac.html">&lt;div class=&quot;entry-content&quot;&gt;
	&lt;p&gt;In this post I describe the simple solution of where you can find the USB/Serial devices on your mac. All you really need to do is download the JSSC class on java first in order to be able to work with the device on java .&amp;nbsp;The device I am using is a CP210x USB to UART that gives me serial data.&lt;/p&gt;
    &lt;p&gt;So here’s what people would normally do :&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt; String[] portNames = SerialPort.getPortNames(&quot;COM3&quot;);&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Dear Mister Whoever,&lt;/p&gt;
    &lt;p&gt;This is not going to work. Instead try :&lt;/p&gt;
    &lt;pre&gt; Pattern pattern = Pattern.compile(&quot;tty.&quot;);
     String[] portNames = SerialPortList.getPortNames(&quot;/dev&quot;, pattern);&lt;/pre&gt;
    &lt;p&gt;since this is where the usb devices show up on a Mac.&lt;/p&gt;
    &lt;p&gt;You will have access to the portNames this way. Then you can proceed to read the serial data and have a jolly good day.&lt;br /&gt;
    The next thing you do to read the data is :&lt;/p&gt;
    &lt;p&gt;[ The below line is important as it points to the serial port. In windows you would give it as COM3 or the like. After that, the procedure is pretty much the same. This one line would have saved me a bunch of hours had I found it online. ]&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;&lt;strong&gt;SerialPort serialPort = new SerialPort(&quot;/dev/tty.SLAB_USBtoUART&quot;);&amp;nbsp;&lt;/strong&gt;
     
     serialPort.openPort();
     serialPort.setParams(SerialPort.BAUDRATE_9600,
     SerialPort.DATABITS_8,
     SerialPort.STOPBITS_1,
     SerialPort.PARITY_NONE);&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&amp;nbsp;&lt;/p&gt;
    &lt;p&gt;Rohith out.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Rohith H Y</name></author><summary type="html">In this post I describe the simple solution of where you can find the USB/Serial devices on your mac. All you really need to do is download the JSSC class on java first in order to be able to work with the device on java .&amp;nbsp;The device I am using is a CP210x USB to UART that gives me serial data. So here’s what people would normally do : String[] portNames = SerialPort.getPortNames(&quot;COM3&quot;); Dear Mister Whoever, This is not going to work. Instead try : Pattern pattern = Pattern.compile(&quot;tty.&quot;); String[] portNames = SerialPortList.getPortNames(&quot;/dev&quot;, pattern); since this is where the usb devices show up on a Mac. You will have access to the portNames this way. Then you can proceed to read the serial data and have a jolly good day. The next thing you do to read the data is : [ The below line is important as it points to the serial port. In windows you would give it as COM3 or the like. After that, the procedure is pretty much the same. This one line would have saved me a bunch of hours had I found it online. ] SerialPort serialPort = new SerialPort(&quot;/dev/tty.SLAB_USBtoUART&quot;);&amp;nbsp; serialPort.openPort(); serialPort.setParams(SerialPort.BAUDRATE_9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE); &amp;nbsp; Rohith out.</summary></entry></feed>